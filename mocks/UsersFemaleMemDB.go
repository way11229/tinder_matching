// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	domain "github.com/way11229/tinder_matching/domain"

	uuid "github.com/google/uuid"
)

// UsersFemaleMemDB is an autogenerated mock type for the UsersFemaleMemDB type
type UsersFemaleMemDB struct {
	mock.Mock
}

type UsersFemaleMemDB_Expecter struct {
	mock *mock.Mock
}

func (_m *UsersFemaleMemDB) EXPECT() *UsersFemaleMemDB_Expecter {
	return &UsersFemaleMemDB_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, input
func (_m *UsersFemaleMemDB) Create(ctx context.Context, input *domain.UsersMemDbCreate) (uuid.NullUUID, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 uuid.NullUUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.UsersMemDbCreate) (uuid.NullUUID, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.UsersMemDbCreate) uuid.NullUUID); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(uuid.NullUUID)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.UsersMemDbCreate) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UsersFemaleMemDB_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type UsersFemaleMemDB_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - input *domain.UsersMemDbCreate
func (_e *UsersFemaleMemDB_Expecter) Create(ctx interface{}, input interface{}) *UsersFemaleMemDB_Create_Call {
	return &UsersFemaleMemDB_Create_Call{Call: _e.mock.On("Create", ctx, input)}
}

func (_c *UsersFemaleMemDB_Create_Call) Run(run func(ctx context.Context, input *domain.UsersMemDbCreate)) *UsersFemaleMemDB_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.UsersMemDbCreate))
	})
	return _c
}

func (_c *UsersFemaleMemDB_Create_Call) Return(_a0 uuid.NullUUID, _a1 error) *UsersFemaleMemDB_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UsersFemaleMemDB_Create_Call) RunAndReturn(run func(context.Context, *domain.UsersMemDbCreate) (uuid.NullUUID, error)) *UsersFemaleMemDB_Create_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteById provides a mock function with given fields: ctx, id
func (_m *UsersFemaleMemDB) DeleteById(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UsersFemaleMemDB_DeleteById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteById'
type UsersFemaleMemDB_DeleteById_Call struct {
	*mock.Call
}

// DeleteById is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *UsersFemaleMemDB_Expecter) DeleteById(ctx interface{}, id interface{}) *UsersFemaleMemDB_DeleteById_Call {
	return &UsersFemaleMemDB_DeleteById_Call{Call: _e.mock.On("DeleteById", ctx, id)}
}

func (_c *UsersFemaleMemDB_DeleteById_Call) Run(run func(ctx context.Context, id uuid.UUID)) *UsersFemaleMemDB_DeleteById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *UsersFemaleMemDB_DeleteById_Call) Return(_a0 error) *UsersFemaleMemDB_DeleteById_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UsersFemaleMemDB_DeleteById_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *UsersFemaleMemDB_DeleteById_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByIds provides a mock function with given fields: ctx, ids
func (_m *UsersFemaleMemDB) DeleteByIds(ctx context.Context, ids []uuid.UUID) error {
	ret := _m.Called(ctx, ids)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByIds")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) error); ok {
		r0 = rf(ctx, ids)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UsersFemaleMemDB_DeleteByIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByIds'
type UsersFemaleMemDB_DeleteByIds_Call struct {
	*mock.Call
}

// DeleteByIds is a helper method to define mock.On call
//   - ctx context.Context
//   - ids []uuid.UUID
func (_e *UsersFemaleMemDB_Expecter) DeleteByIds(ctx interface{}, ids interface{}) *UsersFemaleMemDB_DeleteByIds_Call {
	return &UsersFemaleMemDB_DeleteByIds_Call{Call: _e.mock.On("DeleteByIds", ctx, ids)}
}

func (_c *UsersFemaleMemDB_DeleteByIds_Call) Run(run func(ctx context.Context, ids []uuid.UUID)) *UsersFemaleMemDB_DeleteByIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]uuid.UUID))
	})
	return _c
}

func (_c *UsersFemaleMemDB_DeleteByIds_Call) Return(_a0 error) *UsersFemaleMemDB_DeleteByIds_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UsersFemaleMemDB_DeleteByIds_Call) RunAndReturn(run func(context.Context, []uuid.UUID) error) *UsersFemaleMemDB_DeleteByIds_Call {
	_c.Call.Return(run)
	return _c
}

// GetById provides a mock function with given fields: ctx, id
func (_m *UsersFemaleMemDB) GetById(ctx context.Context, id uuid.UUID) (*domain.User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*domain.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UsersFemaleMemDB_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type UsersFemaleMemDB_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *UsersFemaleMemDB_Expecter) GetById(ctx interface{}, id interface{}) *UsersFemaleMemDB_GetById_Call {
	return &UsersFemaleMemDB_GetById_Call{Call: _e.mock.On("GetById", ctx, id)}
}

func (_c *UsersFemaleMemDB_GetById_Call) Run(run func(ctx context.Context, id uuid.UUID)) *UsersFemaleMemDB_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *UsersFemaleMemDB_GetById_Call) Return(_a0 *domain.User, _a1 error) *UsersFemaleMemDB_GetById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UsersFemaleMemDB_GetById_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*domain.User, error)) *UsersFemaleMemDB_GetById_Call {
	_c.Call.Return(run)
	return _c
}

// ListByHeightLowerBoundWithoutEqual provides a mock function with given fields: ctx, search
func (_m *UsersFemaleMemDB) ListByHeightLowerBoundWithoutEqual(ctx context.Context, search *domain.UsersMemDbHeightSearch) ([]*domain.User, error) {
	ret := _m.Called(ctx, search)

	if len(ret) == 0 {
		panic("no return value specified for ListByHeightLowerBoundWithoutEqual")
	}

	var r0 []*domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.UsersMemDbHeightSearch) ([]*domain.User, error)); ok {
		return rf(ctx, search)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.UsersMemDbHeightSearch) []*domain.User); ok {
		r0 = rf(ctx, search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.UsersMemDbHeightSearch) error); ok {
		r1 = rf(ctx, search)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UsersFemaleMemDB_ListByHeightLowerBoundWithoutEqual_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByHeightLowerBoundWithoutEqual'
type UsersFemaleMemDB_ListByHeightLowerBoundWithoutEqual_Call struct {
	*mock.Call
}

// ListByHeightLowerBoundWithoutEqual is a helper method to define mock.On call
//   - ctx context.Context
//   - search *domain.UsersMemDbHeightSearch
func (_e *UsersFemaleMemDB_Expecter) ListByHeightLowerBoundWithoutEqual(ctx interface{}, search interface{}) *UsersFemaleMemDB_ListByHeightLowerBoundWithoutEqual_Call {
	return &UsersFemaleMemDB_ListByHeightLowerBoundWithoutEqual_Call{Call: _e.mock.On("ListByHeightLowerBoundWithoutEqual", ctx, search)}
}

func (_c *UsersFemaleMemDB_ListByHeightLowerBoundWithoutEqual_Call) Run(run func(ctx context.Context, search *domain.UsersMemDbHeightSearch)) *UsersFemaleMemDB_ListByHeightLowerBoundWithoutEqual_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.UsersMemDbHeightSearch))
	})
	return _c
}

func (_c *UsersFemaleMemDB_ListByHeightLowerBoundWithoutEqual_Call) Return(_a0 []*domain.User, _a1 error) *UsersFemaleMemDB_ListByHeightLowerBoundWithoutEqual_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UsersFemaleMemDB_ListByHeightLowerBoundWithoutEqual_Call) RunAndReturn(run func(context.Context, *domain.UsersMemDbHeightSearch) ([]*domain.User, error)) *UsersFemaleMemDB_ListByHeightLowerBoundWithoutEqual_Call {
	_c.Call.Return(run)
	return _c
}

// ListByHeightUpperBoundWithoutEqual provides a mock function with given fields: ctx, search
func (_m *UsersFemaleMemDB) ListByHeightUpperBoundWithoutEqual(ctx context.Context, search *domain.UsersMemDbHeightSearch) ([]*domain.User, error) {
	ret := _m.Called(ctx, search)

	if len(ret) == 0 {
		panic("no return value specified for ListByHeightUpperBoundWithoutEqual")
	}

	var r0 []*domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.UsersMemDbHeightSearch) ([]*domain.User, error)); ok {
		return rf(ctx, search)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.UsersMemDbHeightSearch) []*domain.User); ok {
		r0 = rf(ctx, search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.UsersMemDbHeightSearch) error); ok {
		r1 = rf(ctx, search)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UsersFemaleMemDB_ListByHeightUpperBoundWithoutEqual_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByHeightUpperBoundWithoutEqual'
type UsersFemaleMemDB_ListByHeightUpperBoundWithoutEqual_Call struct {
	*mock.Call
}

// ListByHeightUpperBoundWithoutEqual is a helper method to define mock.On call
//   - ctx context.Context
//   - search *domain.UsersMemDbHeightSearch
func (_e *UsersFemaleMemDB_Expecter) ListByHeightUpperBoundWithoutEqual(ctx interface{}, search interface{}) *UsersFemaleMemDB_ListByHeightUpperBoundWithoutEqual_Call {
	return &UsersFemaleMemDB_ListByHeightUpperBoundWithoutEqual_Call{Call: _e.mock.On("ListByHeightUpperBoundWithoutEqual", ctx, search)}
}

func (_c *UsersFemaleMemDB_ListByHeightUpperBoundWithoutEqual_Call) Run(run func(ctx context.Context, search *domain.UsersMemDbHeightSearch)) *UsersFemaleMemDB_ListByHeightUpperBoundWithoutEqual_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.UsersMemDbHeightSearch))
	})
	return _c
}

func (_c *UsersFemaleMemDB_ListByHeightUpperBoundWithoutEqual_Call) Return(_a0 []*domain.User, _a1 error) *UsersFemaleMemDB_ListByHeightUpperBoundWithoutEqual_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UsersFemaleMemDB_ListByHeightUpperBoundWithoutEqual_Call) RunAndReturn(run func(context.Context, *domain.UsersMemDbHeightSearch) ([]*domain.User, error)) *UsersFemaleMemDB_ListByHeightUpperBoundWithoutEqual_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBatch provides a mock function with given fields: ctx, input
func (_m *UsersFemaleMemDB) UpdateBatch(ctx context.Context, input []*domain.UsersMemDbUpdate) error {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBatch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*domain.UsersMemDbUpdate) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UsersFemaleMemDB_UpdateBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBatch'
type UsersFemaleMemDB_UpdateBatch_Call struct {
	*mock.Call
}

// UpdateBatch is a helper method to define mock.On call
//   - ctx context.Context
//   - input []*domain.UsersMemDbUpdate
func (_e *UsersFemaleMemDB_Expecter) UpdateBatch(ctx interface{}, input interface{}) *UsersFemaleMemDB_UpdateBatch_Call {
	return &UsersFemaleMemDB_UpdateBatch_Call{Call: _e.mock.On("UpdateBatch", ctx, input)}
}

func (_c *UsersFemaleMemDB_UpdateBatch_Call) Run(run func(ctx context.Context, input []*domain.UsersMemDbUpdate)) *UsersFemaleMemDB_UpdateBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]*domain.UsersMemDbUpdate))
	})
	return _c
}

func (_c *UsersFemaleMemDB_UpdateBatch_Call) Return(_a0 error) *UsersFemaleMemDB_UpdateBatch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UsersFemaleMemDB_UpdateBatch_Call) RunAndReturn(run func(context.Context, []*domain.UsersMemDbUpdate) error) *UsersFemaleMemDB_UpdateBatch_Call {
	_c.Call.Return(run)
	return _c
}

// NewUsersFemaleMemDB creates a new instance of UsersFemaleMemDB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUsersFemaleMemDB(t interface {
	mock.TestingT
	Cleanup(func())
}) *UsersFemaleMemDB {
	mock := &UsersFemaleMemDB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
