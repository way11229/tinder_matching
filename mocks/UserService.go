// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	domain "github.com/way11229/tinder_matching/domain"

	uuid "github.com/google/uuid"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

type UserService_Expecter struct {
	mock *mock.Mock
}

func (_m *UserService) EXPECT() *UserService_Expecter {
	return &UserService_Expecter{mock: &_m.Mock}
}

// CreateUserAndListMatches provides a mock function with given fields: ctx, input
func (_m *UserService) CreateUserAndListMatches(ctx context.Context, input *domain.CreateUser) (*domain.CreateUserResp, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for CreateUserAndListMatches")
	}

	var r0 *domain.CreateUserResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.CreateUser) (*domain.CreateUserResp, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.CreateUser) *domain.CreateUserResp); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.CreateUserResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.CreateUser) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_CreateUserAndListMatches_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUserAndListMatches'
type UserService_CreateUserAndListMatches_Call struct {
	*mock.Call
}

// CreateUserAndListMatches is a helper method to define mock.On call
//   - ctx context.Context
//   - input *domain.CreateUser
func (_e *UserService_Expecter) CreateUserAndListMatches(ctx interface{}, input interface{}) *UserService_CreateUserAndListMatches_Call {
	return &UserService_CreateUserAndListMatches_Call{Call: _e.mock.On("CreateUserAndListMatches", ctx, input)}
}

func (_c *UserService_CreateUserAndListMatches_Call) Run(run func(ctx context.Context, input *domain.CreateUser)) *UserService_CreateUserAndListMatches_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.CreateUser))
	})
	return _c
}

func (_c *UserService_CreateUserAndListMatches_Call) Return(_a0 *domain.CreateUserResp, _a1 error) *UserService_CreateUserAndListMatches_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_CreateUserAndListMatches_Call) RunAndReturn(run func(context.Context, *domain.CreateUser) (*domain.CreateUserResp, error)) *UserService_CreateUserAndListMatches_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUserById provides a mock function with given fields: ctx, id
func (_m *UserService) DeleteUserById(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserService_DeleteUserById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUserById'
type UserService_DeleteUserById_Call struct {
	*mock.Call
}

// DeleteUserById is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *UserService_Expecter) DeleteUserById(ctx interface{}, id interface{}) *UserService_DeleteUserById_Call {
	return &UserService_DeleteUserById_Call{Call: _e.mock.On("DeleteUserById", ctx, id)}
}

func (_c *UserService_DeleteUserById_Call) Run(run func(ctx context.Context, id uuid.UUID)) *UserService_DeleteUserById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *UserService_DeleteUserById_Call) Return(_a0 error) *UserService_DeleteUserById_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserService_DeleteUserById_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *UserService_DeleteUserById_Call {
	_c.Call.Return(run)
	return _c
}

// ListMatchesByUserId provides a mock function with given fields: ctx, input
func (_m *UserService) ListMatchesByUserId(ctx context.Context, input *domain.UserListMatchesByUserId) ([]*domain.User, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for ListMatchesByUserId")
	}

	var r0 []*domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.UserListMatchesByUserId) ([]*domain.User, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.UserListMatchesByUserId) []*domain.User); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.UserListMatchesByUserId) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_ListMatchesByUserId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListMatchesByUserId'
type UserService_ListMatchesByUserId_Call struct {
	*mock.Call
}

// ListMatchesByUserId is a helper method to define mock.On call
//   - ctx context.Context
//   - input *domain.UserListMatchesByUserId
func (_e *UserService_Expecter) ListMatchesByUserId(ctx interface{}, input interface{}) *UserService_ListMatchesByUserId_Call {
	return &UserService_ListMatchesByUserId_Call{Call: _e.mock.On("ListMatchesByUserId", ctx, input)}
}

func (_c *UserService_ListMatchesByUserId_Call) Run(run func(ctx context.Context, input *domain.UserListMatchesByUserId)) *UserService_ListMatchesByUserId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.UserListMatchesByUserId))
	})
	return _c
}

func (_c *UserService_ListMatchesByUserId_Call) Return(_a0 []*domain.User, _a1 error) *UserService_ListMatchesByUserId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_ListMatchesByUserId_Call) RunAndReturn(run func(context.Context, *domain.UserListMatchesByUserId) ([]*domain.User, error)) *UserService_ListMatchesByUserId_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
